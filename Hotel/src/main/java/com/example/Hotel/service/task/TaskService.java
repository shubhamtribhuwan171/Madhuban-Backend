package com.example.Hotel.service.task;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.Hotel.entity.room.Room;
import com.example.Hotel.entity.room.RoomAvailabilityStatus;
import com.example.Hotel.entity.task.Task;
import com.example.Hotel.entity.task.TaskConfig;
import com.example.Hotel.entity.task.TaskDto;
import com.example.Hotel.repository.room.RoomRepository;
import com.example.Hotel.repository.task.TaskConfigRepository;
import com.example.Hotel.repository.task.TaskRepository;

import jakarta.transaction.Transactional;

@Service
public class TaskService {

    @Autowired
    TaskRepository taskRepository;

    @Autowired
    TaskConfigRepository taskConfigRepository;

    @Autowired
    RoomRepository roomRepository;

    
    RoomAvailabilityStatus ras;

    //to create a new task
    public String createTask(TaskDto taskDto)
    {
        Optional<Room> roomOpt = roomRepository.findByRoomNumber(taskDto.getRoomNumber());
        if(roomOpt == null)
            return "Room Does not exist!";
        
        TaskConfig tc = taskConfigRepository.findByTaskName(taskDto.getTaskName());
        List<Task> taskOpt = taskRepository.findByRoomAndTaskConfigAndStatusNot(roomOpt.get(), tc , "Completed");
        if(taskOpt == null)
        {
            Task task = mapToObj(taskDto);
            task.setDueTime(LocalTime.MAX);
            task.setAutoGenerated(false);
            taskRepository.save(task);
            return "taskId: "+task.getTaskId() +" : "+ task.getTaskConfig().getTaskName() +" created for: "+ task.getRoom().getRoomNumber();
        }
        return "Task already exist!";
    }

    //auto generate task once checked out
    public String createAutoTask(String priority, Integer roomNumber, LocalTime dueTime, String taskName)
    {
        Task t = new Task();
        t.setDueDate(LocalDate.now());
        t.setDueTime(dueTime);
        t.setRoom(roomRepository.findByRoomNumber(roomNumber).get());
        t.setAutoGenerated(true);
        t.setStatus("Assigned");
        TaskConfig tConfig = taskConfigRepository.findByTaskName(taskName);
        t.setTaskConfig(tConfig);
        t.setPriority(priority);
    
        taskRepository.save(t);
        return "taskId: "+t.getTaskId() +" : "+ t.getTaskConfig().getTaskName()+" created for: "+ t.getRoom().getRoomNumber();
    }

    //get all the task
    public List<TaskDto> getAllTasks()
    {
        List<Task> tasks = taskRepository.findAll();
        return mapToDtoList(tasks);
        
    }

    //get incomplete task
    public List<TaskDto> getByStatus(String status)
    {
        List<Task> list = taskRepository.findByStatus(status);
        return mapToDtoList(list);
    }

    //get task by due date
    public List<TaskDto> getTaskByDueDate(LocalDate dueDate)
    {
        List<Task> list = taskRepository.findByDueDate(dueDate);
        return mapToDtoList(list);
    }

    //get task by priority
    public List<TaskDto> getTaskByPriorityAndDueDate(String priority, LocalDate dueDate)
    {
        List<Task> list = taskRepository.findByDueDateAndPriority(dueDate, priority);
        return mapToDtoList(list);
    }

    //get by auto generation
    public List<TaskDto> getByGenerationType(boolean isAutoGenerated)
    {
        List<Task> list = taskRepository.findByAutoGenerated(isAutoGenerated);
        return mapToDtoList(list);
    }
    //update status as completed
    @Transactional
    public String updateStatus(String newStatus, Long taskId)
    {
        Optional<Task> optional = taskRepository.findById(taskId);
        if(optional.isPresent())
        {
            Task t = optional.get();
            t.setStatus(newStatus);
            if(newStatus.equalsIgnoreCase("Completed"))
            {
                Room r = t.getRoom();
                r.setRoomStatus("vacant");
                ras.setStatus("vacant");
                ras.setCheckinDate(null);
                ras.setCheckinTime(null);
                ras.setCheckoutDate(null);
                ras.setCheckoutTime(null);
            }
            taskRepository.save(t);
            return "Status updated for task id:"+t.getTaskId()+" to "+ newStatus;
        }
        return "Task Not present";
    }

    //get by id
    public TaskDto getById(Long taskId)
    {
        Optional<Task>opt = taskRepository.findById(taskId);
        if(opt.isPresent())
        {
            Task t = opt.get();
            return mapToDto(t);
        }
        return null;
    }

    //edit task
    @Transactional
    public TaskDto updateTask(TaskDto dto, Long taskId)
    {
        //Room room = roomRepository.findByRoomNumber(roomNumber).get();
        //TaskConfig tConfig = taskConfigRepository.findByTaskName("Cleaning");
        Optional<Task> opt = taskRepository.findById(taskId);
        if(opt.isPresent())
        {
            Task t = opt.get();
            t.setDueDate(dto.getDueDate());
            t.setPriority(dto.getPriority());
            t.setStatus(dto.getStatus());
            if(dto.getStatus().equalsIgnoreCase("Completed"))
            {
                Room r = t.getRoom();
                r.setRoomStatus("vacant");
                ras.setStatus("vacant");
                ras.setCheckinDate(null);
                ras.setCheckinTime(null);
                ras.setCheckoutDate(null);
                ras.setCheckoutTime(null);
            }
            taskRepository.save(t);
            return mapToDto(t);
        }
        return null;
    }

    //delete task
    @Transactional
    public String deleteTask(String taskName, Integer roomNumber)
    {
        Room room = roomRepository.findByRoomNumber(roomNumber).get();
        TaskConfig tConfig = taskConfigRepository.findByTaskName(taskName);
        taskRepository.deleteByRoomAndTaskConfig(room, tConfig);
        return "Task deleted!";

    }

    Task mapToObj(TaskDto taskDto)
    {
        LocalDate dueDate = taskDto.getDueDate();
        LocalTime dueTime = taskDto.getDueTime();

        String taskName = taskDto.getTaskName();
        TaskConfig  taskConfig = taskConfigRepository.findByTaskName(taskName);
        String priority = taskDto.getPriority();
        Integer roomNumber = taskDto.getRoomNumber();
        Room room = roomRepository.findByRoomNumber(roomNumber).get();
        String status = taskDto.getStatus();
        boolean autoGenerated = taskDto.isAutoGenerated();
        Task task = new Task(dueDate, dueTime, taskConfig, priority, room, status, autoGenerated);
        return task;
    }

    TaskDto mapToDto(Task task)
    {
        TaskDto taskDto = new TaskDto();
        taskDto.setTaskId(task.getTaskId());
        taskDto.setDueDate(task.getDueDate());
        taskDto.setDueTime(task.getDueTime());
        taskDto.setPriority(task.getPriority());
        taskDto.setAutoGenerated(task.isAutoGenerated());
        taskDto.setPriority(task.getPriority());
        taskDto.setRoomNumber(task.getRoom().getRoomNumber());
        taskDto.setTaskName(task.getTaskConfig().getTaskName());
        taskDto.setStatus(task.getStatus());


        return taskDto;
    }

    List<TaskDto> mapToDtoList(List<Task> list)
    {
        return list.stream()
            .map(this :: mapToDto)
            .collect(Collectors.toList());
    }

    public List<TaskDto> getByRoom(Integer roomNumber)
    {
        Room room = roomRepository.findByRoomNumber(roomNumber).get();
  
        return mapToDtoList(taskRepository.findByRoomOrderByDueDateAsc(room));
//        return taskRepository.findByRoomAndTaskConfigAndStatusNot(room, taskConfigRepository.findByTaskName("Cleaning"), "Completed");

    }
    
}
